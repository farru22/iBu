const express=require("express");
const jwt=require("jsonwebtoken");
const app=express();
const jwtpassword="123456";//this password is needed to verify the token from server side
app.use(express.json());
const mongoose = require("mongoose");
mongoose.connect("mongodb+srv://farhanakhtar7869:Farhan123@cluster22.tt7imeu.mongodb.net/usernew"); //Database url

const User = mongoose.model("User", {
  name: String,
  email: String,
  password: String,
});                 

// const user=new User({
//   name:"farhan",
//   email:"ztejd@example.com",
//   password:"farhan123"
// });

// user.save(); //saving to database

//creating a sigin backend server

app.post("/signup",async function (req, res) {
  const name = req.body.name;
  const email = req.body.email;
  const password = req.body.password;

  const existUser= await User.findOne({email:email});

  if(existUser){
    res.status(400).send("User already exist");
  }

  const user=new User({
    name:name,
    email:email,
    password:password
  })

  user.save();
  res.send("User created");
});

function userExist(username,password){ //Checking here that we exist in db or not
  let user=false;
  for(let i=0;i<AllUser.length;i++){
    if(AllUser[i].username==username && AllUser[i].password==password){
      user=true;
    }
  }
  return user;
}

app.post("/signin",function(req,res){
  const username=req.body.username;
  const password=req.body.password;

  if(!userExist(username,password)){
    return res.status(401).json({
      msg: "User doesn't exist in db"
    })
  }
  var token=jwt.sign({username:username},jwtpassword);//we are signing the token with the jwtpassword and encoding username only
  res.json({
    token:token  //We got our token back now we need to store it in local storage so that when we end our session that token also end itself(temporary storage)
  })
})

app.get("/user",function(req,res){
  const token=req.headers.authorization; //we need to give that token as a header
  try{
    const decoded=jwt.verify(token,jwtpassword);//everytime we take token from user we are verifying it with the jwtpassword and jwt will vaildate it which jwt is generated it by jwt.sign process
  //And this jwt.verify will throw an error if token is not valid and if it is valid then it will return original json object which is encoded and token generated by jwt.sign

  //Hereby if jwt.verify didn't throw an exception then we just proceed to do our request work
    const username=decoded.name;
    //return the list of user other than this username
    res.json({
      user: AllUser.filter(user=>user.username!=username)
    })
  }catch(err){  //unless we catch error and give a 401 forbidden msg
    res.status(401).json({
      msg:"Invalid token"
    })
  }
})

app.get('/lolo', (req,res) => {
    res.json({
        msg : 'Farhan'
    });
})

app.listen(3000, ()=>{
    console.log('Mu me lo ')
})
